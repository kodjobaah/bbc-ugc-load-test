<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Order flow test plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group of Order&apos;s flow" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">75</stringProp>
        <stringProp name="ThreadGroup.ramp_time">60</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">18000</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create New User (ThreadNum${__threadNum})" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;firstName&quot;: &quot;${firstName}&quot;,&#xd;
  &quot;lastName&quot;: &quot;${lastName}&quot;,&#xd;
  &quot;email&quot;: &quot;${email}&quot;,&#xd;
  &quot;password&quot;: &quot;${password}&quot;,&#xd;
  &quot;provider&quot;: &quot;${provider}&quot;,&#xd;
  &quot;phoneNumber&quot;: &quot;${phoneNumber}&quot;,&#xd;
  &quot;providerUserId&quot;: null&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${apiVersion}/shop/customers</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Store</stringProp>
                <stringProp name="Header.value">${store}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/ld+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Name</stringProp>
                <stringProp name="Header.value">${name}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Platform</stringProp>
                <stringProp name="Header.value">${platform}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Version</stringProp>
                <stringProp name="Header.value">${version}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authenticate Existing Shop User (ThreadNum${__threadNum})" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;email&quot;: &quot;${email}&quot;,&#xd;
	&quot;password&quot;: &quot;${password}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${apiVersion}/shop/authentication-token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Store</stringProp>
                <stringProp name="Header.value">${store}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/ld+json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Order (ThreadNum${__threadNum})" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;items&quot;: [&#xd;
    {&#xd;
      &quot;productCode&quot;: &quot;${productCode}&quot;,&#xd;
      &quot;quantity&quot;: ${productQuantity}&#xd;
    }&#xd;
  ],&#xd;
  &quot;shippingAddress&quot;: {&#xd;
    &quot;coordinates&quot;: &quot;51.512928,-0.094118&quot;,&#xd;
    &quot;freeFormAddress&quot;: &quot;23 Watling St, London EC4M 9BR, UK&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${apiVersion}/shop/orders</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Store</stringProp>
                <stringProp name="Header.value">${store}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/ld+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Name</stringProp>
                <stringProp name="Header.value">${name}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Platform</stringProp>
                <stringProp name="Header.value">${platform}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Version</stringProp>
                <stringProp name="Header.value">${version}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">tokenValue</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokenValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Complete Order (ThreadNum${__threadNum})" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;note&quot;: &quot;Add only green bananas and unripe avocado&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${apiVersion}/shop/orders/${tokenValue}/complete</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/merge-patch+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Store</stringProp>
                <stringProp name="Header.value">${store}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/ld+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Name</stringProp>
                <stringProp name="Header.value">${name}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Platform</stringProp>
                <stringProp name="Header.value">${platform}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Version</stringProp>
                <stringProp name="Header.value">${version}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">tokenValue</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokenValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment-intent (ThreadNum${__threadNum})" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${apiVersion}/shop/orders/${tokenValue}/payment-intent</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/ld+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Name</stringProp>
                <stringProp name="Header.value">${name}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Platform</stringProp>
                <stringProp name="Header.value">${platform}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Version</stringProp>
                <stringProp name="Header.value">${version}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Payment Methods (ThreadNum${__threadNum})" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${apiVersion}/shop/account/payment-methods</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/ld+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Platform</stringProp>
                <stringProp name="Header.value">${platform}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Version</stringProp>
                <stringProp name="Header.value">${version}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Name</stringProp>
                <stringProp name="Header.value">${name}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[Adyen] Post pay (ThreadNum${__threadNum})" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;type&quot;: &quot;scheme&quot;,&#xd;
    &quot;encryptedCardNumber&quot;: &quot;test_4977949494949497&quot;,&#xd;
    &quot;encryptedExpiryMonth&quot;: &quot;test_03&quot;,&#xd;
    &quot;encryptedExpiryYear&quot;: &quot;test_2030&quot;,&#xd;
    &quot;encryptedSecurityCode&quot;: &quot;test_737&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${baseUrl}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${apiVersion}/shop/orders/${tokenValue}/pay</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/ld+json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Name</stringProp>
                <stringProp name="Header.value">${name}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Platform</stringProp>
                <stringProp name="Header.value">${platform}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Client-Version</stringProp>
                <stringProp name="Header.value">${version}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="influxdbMetricsSender" elementType="Argument">
                <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
                <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxdbUrl" elementType="Argument">
                <stringProp name="Argument.name">influxdbUrl</stringProp>
                <stringProp name="Argument.value">http://ac2a67b384cfb4a30b8add262f77957a-820026286.eu-west-3.elb.amazonaws.com:8086/api/v2/write?org=afriex.co.uk&amp;bucket=afriex-marketplace</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="application" elementType="Argument">
                <stringProp name="Argument.name">application</stringProp>
                <stringProp name="Argument.value">orderFlow</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="measurement" elementType="Argument">
                <stringProp name="Argument.name">measurement</stringProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="summaryOnly" elementType="Argument">
                <stringProp name="Argument.name">summaryOnly</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersRegex" elementType="Argument">
                <stringProp name="Argument.name">samplersRegex</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="percentiles" elementType="Argument">
                <stringProp name="Argument.name">percentiles</stringProp>
                <stringProp name="Argument.value">99;95;90</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="testTitle" elementType="Argument">
                <stringProp name="Argument.name">testTitle</stringProp>
                <stringProp name="Argument.value">Order Flow</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventTags" elementType="Argument">
                <stringProp name="Argument.name">eventTags</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxdbToken" elementType="Argument">
                <stringProp name="Argument.name">influxdbToken</stringProp>
                <stringProp name="Argument.value">kchH6gHHzK-6Gx_wEkqPngDi5WeTDCgcwwcNdqFv34ErPdibBnr0dpLwiUsjUUeVgdduU1bTs6viA7P_L5fZRA==</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersList" elementType="Argument">
                <stringProp name="Argument.name">samplersList</stringProp>
                <stringProp name="Argument.value">metrics</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Delay between HTTP requests" enabled="true">
          <stringProp name="ConstantTimer.delay">1000</stringProp>
        </ConstantTimer>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="jp@gc - Ultimate Thread Group" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-296135914">
            <stringProp name="100">100</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="30">30</stringProp>
            <stringProp name="60">60</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree/>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="bzm - Concurrency Thread Group" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">12</stringProp>
        <stringProp name="RampUp">60</stringProp>
        <stringProp name="Steps">3</stringProp>
        <stringProp name="Hold">180</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree/>
      <kg.apc.jmeter.threads.SteppingThreadGroup guiclass="kg.apc.jmeter.threads.SteppingThreadGroupGui" testclass="kg.apc.jmeter.threads.SteppingThreadGroup" testname="jp@gc - Stepping Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="Threads initial delay">0</stringProp>
        <stringProp name="Start users count">10</stringProp>
        <stringProp name="Start users count burst">0</stringProp>
        <stringProp name="Start users period">30</stringProp>
        <stringProp name="Stop users count">5</stringProp>
        <stringProp name="Stop users period">1</stringProp>
        <stringProp name="flighttime">60</stringProp>
        <stringProp name="rampUp">5</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
      </kg.apc.jmeter.threads.SteppingThreadGroup>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Database Setup Local" enabled="false">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.sql.*;

try {

    String databaseHost = &quot;localhost&quot;;
    int databasePort = 3306;
    String databaseUsername = &quot;root&quot;;
    String databasePassword = &quot;project&quot;;

    String productCode = vars.get(&quot;productCode&quot;);
    String storeCode = vars.get(&quot;store&quot;);
    log.info(&quot;storeCode:&quot;+storeCode);
    log.info(&quot;prodcutCode=&quot;+productCode);
    String url = &quot;jdbc:mysql://localhost:&quot; + databasePort;
    Connection con = DriverManager.getConnection(url, databaseUsername, databasePassword);

    String storeStockIdQuery = &quot;SELECT ss.id FROM project.sylius_product p  INNER JOIN project.sylius_product_variant pv ON p.id = pv.product_id  INNER JOIN project.app_store_stock ss ON ss.product_variant_id = pv.id INNER JOIN project.app_store s ON s.id = ss.store_id  where p.code = &apos;&quot;+productCode+&quot;&apos; and s.code = &apos;&quot;+storeCode+&quot;&apos;&quot;;

    Statement statement1 = con.createStatement();
    ResultSet resultSet1 = null;
    resultSet1 = statement1.executeQuery(storeStockIdQuery);
    String storeStockId = null;
    while (resultSet1.next()) {
        storeStockId = resultSet1.getString(&quot;id&quot;);
        log.info(&quot;storeSockId From db call: &quot; + storeStockId);
        log.info(&quot;storeStockId=&quot;+storeStockId);
        Integer ss = Integer.parseInt(storeStockId);
        String updateOnHandQuery = &quot;UPDATE project.app_store_stock pp SET pp.on_hand = 20000 WHERE pp.id = ?&quot;;
        PreparedStatement preparedStmt = con.prepareStatement(updateOnHandQuery);
        preparedStmt.setInt(1, ss.intValue() );
        preparedStmt.executeUpdate();
    }

        //making sure the store is open before the test run
    statement1 = con.createStatement();
    resultSet1 = statement1.executeQuery(storeStockIdQuery);
    while (resultSet1.next()) {
        storeStockId = resultSet1.getString(&quot;id&quot;);
        log.info(&quot;storeSockId From db call: &quot; + storeStockId);
        log.info(&quot;storeStockId=&quot;+storeStockId);
        Integer ss = Integer.parseInt(storeStockId);
   	   String updateOpeningHours = &quot;update  project.app_store_operating_hours soh set soh.open_time = &apos;00:00&apos;, soh.close_time = &apos;23:59&apos; where soh.store_id = (select id from project.app_store where code = ?)&quot;;
   
        PreparedStatement preparedStmt = con.prepareStatement(updateOpeningHours);
        preparedStmt.setNString(1, storeCode);
        preparedStmt.executeUpdate();
    }

    con.close();

} catch(Throwable ex) {
    log.info(&quot;Beanshell failure&quot;, ex);
    throw ex;
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Database Setup SSH Tunnel" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.sql.*;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;

try {

    String jumpserverHost = &quot;bastion_ip&quot;;
    String jumpserverUsername = &quot;ubuntu&quot;;
    String databaseHost = &quot;afriex_database_host&quot;;
    int databasePort = 3306;
    String databaseUsername = &quot;admin&quot;;
    String databasePassword = &quot;afriex_database_password&quot;;

    JSch jsch = new JSch();
    jsch.addIdentity(&quot;/data/marketplace-bastion-dev.pem&quot;);
    java.util.Properties config = new java.util.Properties();
    config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);
    Session session = jsch.getSession(jumpserverUsername, jumpserverHost);
    session.setConfig(config);
    //session.setTimeout(300);
    session.connect();
    int forwardedPort = session.setPortForwardingL(0, databaseHost, databasePort);

    String productCode = vars.get(&quot;productCode&quot;);
    String storeCode = vars.get(&quot;store&quot;);
    log.info(&quot;storeCode:&quot;+storeCode);
    log.info(&quot;prodcutCode=&quot;+productCode);
    String url = &quot;jdbc:mysql://localhost:&quot; + forwardedPort;
    Connection con = DriverManager.getConnection(url, databaseUsername, databasePassword);

	//Updating store stock
    String storeStockIdQuery = &quot;SELECT ss.id FROM afriex.sylius_product p  INNER JOIN afriex.sylius_product_variant pv ON p.id = pv.product_id  INNER JOIN afriex.app_store_stock ss ON ss.product_variant_id = pv.id INNER JOIN afriex.app_store s ON s.id = ss.store_id  where p.code = &apos;&quot;+productCode+&quot;&apos; and s.code = &apos;&quot;+storeCode+&quot;&apos;&quot;;

    Statement statement1 = con.createStatement();
    ResultSet resultSet1 = null;
    resultSet1 = statement1.executeQuery(storeStockIdQuery);
    String storeStockId = null;
    while (resultSet1.next()) {
        storeStockId = resultSet1.getString(&quot;id&quot;);
        log.info(&quot;storeSockId From db call: &quot; + storeStockId);
        log.info(&quot;storeStockId=&quot;+storeStockId);
        Integer ss = Integer.parseInt(storeStockId);
        String updateOnHandQuery = &quot;UPDATE afriex.app_store_stock pp SET pp.on_hand = 100000, pp.on_hold = 0 WHERE pp.id = ?&quot;;
        PreparedStatement preparedStmt = con.prepareStatement(updateOnHandQuery);
        preparedStmt.setInt(1, ss.intValue() );
        preparedStmt.executeUpdate();
    }

    //making sure the store is open before the test run
    statement1 = con.createStatement();
    resultSet1 = statement1.executeQuery(storeStockIdQuery);
    while (resultSet1.next()) {
        storeStockId = resultSet1.getString(&quot;id&quot;);
        log.info(&quot;storeSockId From db call: &quot; + storeStockId);
        log.info(&quot;storeStockId=&quot;+storeStockId);
        Integer ss = Integer.parseInt(storeStockId);
   	   String updateOpeningHours = &quot;update  afriex.app_store_operating_hours soh set soh.open_time = &apos;00:00&apos;, soh.close_time = &apos;23:59&apos; where soh.store_id = (select id from afriex.app_store where code = ?)&quot;;
   
        PreparedStatement preparedStmt = con.prepareStatement(updateOpeningHours);
        preparedStmt.setNString(1, storeCode);
        preparedStmt.executeUpdate();
    }

    
    con.close();


} catch(Throwable ex) {
    log.info(&quot;Beanshell failure: Setup&quot;, ex);
    throw ex;
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Database Setup" enabled="false">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.sql.*;

try {

    String databaseHost = &quot;&quot;;
    int databasePort = 3306;
    String databaseUsername = &quot;admin&quot;;
    String databasePassword = &quot;&quot;;

    String productCode = vars.get(&quot;productCode&quot;);
    String storeCode = vars.get(&quot;store&quot;);
    log.info(&quot;storeCode:&quot;+storeCode);
    log.info(&quot;prodcutCode=&quot;+productCode);
    String url = &quot;jdbc:mysql://:&quot; + databasePort;
    Connection con = DriverManager.getConnection(url, databaseUsername, databasePassword);

    String storeStockIdQuery = &quot;SELECT ss.id FROM afriex.sylius_product p  INNER JOIN afriex.sylius_product_variant pv ON p.id = pv.product_id  INNER JOIN afriex.app_store_stock ss ON ss.product_variant_id = pv.id INNER JOIN afriex.app_store s ON s.id = ss.store_id  where p.code = &apos;&quot;+productCode+&quot;&apos; and s.code = &apos;&quot;+storeCode+&quot;&apos;&quot;;

    Statement statement1 = con.createStatement();
    ResultSet resultSet1 = null;
    resultSet1 = statement1.executeQuery(storeStockIdQuery);
    String storeStockId = null;
    while (resultSet1.next()) {
        storeStockId = resultSet1.getString(&quot;id&quot;);
        log.info(&quot;storeSockId From db call: &quot; + storeStockId);
        log.info(&quot;storeStockId=&quot;+storeStockId);
        Integer ss = Integer.parseInt(storeStockId);
        String updateOnHandQuery = &quot;UPDATE afriex.app_store_stock pp SET pp.on_hand = 20000 WHERE pp.id = ?&quot;;
        PreparedStatement preparedStmt = con.prepareStatement(updateOnHandQuery);
        preparedStmt.setInt(1, ss.intValue() );
        preparedStmt.executeUpdate();
    }

    con.close();

} catch(Throwable ex) {
    log.info(&quot;Beanshell failure&quot;, ex);
    throw ex;
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Database Teardown SSH Tunnel" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.sql.*;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;

try {

    String jumpserverHost = &quot;bastion_ip&quot;;
    String jumpserverUsername = &quot;ubuntu&quot;;
    String databaseHost = &quot;afriex_database_host&quot;;
    int databasePort = 3306;
    String databaseUsername = &quot;admin&quot;;
    String databasePassword = &quot;afriex_database_host_password&quot;;

    JSch jsch = new JSch();
    jsch.addIdentity(&quot;/data/marketplace-bastion-dev.pem&quot;);
    java.util.Properties config = new java.util.Properties();
    config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);
    Session session = jsch.getSession(jumpserverUsername, jumpserverHost);
    session.setConfig(config);
    //session.setTimeout(300);
    session.connect();
    int forwardedPort = session.setPortForwardingL(0, databaseHost, databasePort);

    String productCode = vars.get(&quot;productCode&quot;);
    String storeCode = vars.get(&quot;store&quot;);
    log.info(&quot;storeCode:&quot;+storeCode);
    log.info(&quot;prodcutCode=&quot;+productCode);
    String url = &quot;jdbc:mysql://localhost:&quot; + forwardedPort;
    Connection con = DriverManager.getConnection(url, databaseUsername, databasePassword);

	//Updating store stock
    String storeStockIdQuery = &quot;SELECT ss.id FROM afriex.sylius_product p  INNER JOIN afriex.sylius_product_variant pv ON p.id = pv.product_id  INNER JOIN afriex.app_store_stock ss ON ss.product_variant_id = pv.id INNER JOIN afriex.app_store s ON s.id = ss.store_id  where p.code = &apos;&quot;+productCode+&quot;&apos; and s.code = &apos;&quot;+storeCode+&quot;&apos;&quot;;

    Statement statement1 = con.createStatement();
    ResultSet resultSet1 = null;
    resultSet1 = statement1.executeQuery(storeStockIdQuery);
    String storeStockId = null;
    while (resultSet1.next()) {
        storeStockId = resultSet1.getString(&quot;id&quot;);
        log.info(&quot;storeSockId From db call: &quot; + storeStockId);
        log.info(&quot;storeStockId=&quot;+storeStockId);
        Integer ss = Integer.parseInt(storeStockId);
        String updateOnHandQuery = &quot;UPDATE afriex.app_store_stock pp SET pp.on_hand = 1, pp.on_hold = 0 WHERE pp.id = ?&quot;;
        PreparedStatement preparedStmt = con.prepareStatement(updateOnHandQuery);
        preparedStmt.setInt(1, ss.intValue() );
        preparedStmt.executeUpdate();
    }

    //making sure the store is open before the test run
    statement1 = con.createStatement();
    resultSet1 = statement1.executeQuery(storeStockIdQuery);
    while (resultSet1.next()) {
        storeStockId = resultSet1.getString(&quot;id&quot;);
        log.info(&quot;storeSockId From db call: &quot; + storeStockId);
        log.info(&quot;storeStockId=&quot;+storeStockId);
        Integer ss = Integer.parseInt(storeStockId);
   	   String updateOpeningHours = &quot;update  afriex.app_store_operating_hours soh set soh.open_time = &apos;10:00&apos;, soh.close_time = &apos;20:00&apos; where soh.store_id = (select id from afriex.app_store where code = ?)&quot;;
   
        PreparedStatement preparedStmt = con.prepareStatement(updateOpeningHours);
        preparedStmt.setNString(1, storeCode);
        preparedStmt.executeUpdate();
    }

    
    con.close();


} catch(Throwable ex) {
    log.info(&quot;Beanshell failure: Teardownd&quot;, ex);
    throw ex;
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Database Teardown Local" enabled="false">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.sql.*;

try {

    String databaseHost = &quot;&quot;;
    int databasePort = 3306;
    String databaseUsername = &quot;admin&quot;;
    String databasePassword = &quot;&quot;;

    String productCode = vars.get(&quot;productCode&quot;);
    String storeCode = vars.get(&quot;store&quot;);
    log.info(&quot;storeCode:&quot;+storeCode);
    log.info(&quot;prodcutCode=&quot;+productCode);
    String url = &quot;jdbc:mysql://:&quot; + databasePort;
    Connection con = DriverManager.getConnection(url, databaseUsername, databasePassword);


	//Updating store stock
    String storeStockIdQuery = &quot;SELECT ss.id FROM afriex.sylius_product p  INNER JOIN afriex.sylius_product_variant pv ON p.id = pv.product_id  INNER JOIN afriex.app_store_stock ss ON ss.product_variant_id = pv.id INNER JOIN afriex.app_store s ON s.id = ss.store_id  where p.code = &apos;&quot;+productCode+&quot;&apos; and s.code = &apos;&quot;+storeCode+&quot;&apos;&quot;;

    Statement statement1 = con.createStatement();
    ResultSet resultSet1 = null;
    resultSet1 = statement1.executeQuery(storeStockIdQuery);
    String storeStockId = null;
    while (resultSet1.next()) {
        storeStockId = resultSet1.getString(&quot;id&quot;);
        log.info(&quot;storeSockId From db call: &quot; + storeStockId);
        log.info(&quot;storeStockId=&quot;+storeStockId);
        Integer ss = Integer.parseInt(storeStockId);
        String updateOnHandQuery = &quot;UPDATE afriex.app_store_stock pp SET pp.on_hand = 1, pp.on_hold = 0 WHERE pp.id = ?&quot;;
        PreparedStatement preparedStmt = con.prepareStatement(updateOnHandQuery);
        preparedStmt.setInt(1, ss.intValue() );
        preparedStmt.executeUpdate();
    }

    //making sure the store is open before the test run
    statement1 = con.createStatement();
    resultSet1 = statement1.executeQuery(storeStockIdQuery);
    while (resultSet1.next()) {
        storeStockId = resultSet1.getString(&quot;id&quot;);
        log.info(&quot;storeSockId From db call: &quot; + storeStockId);
        log.info(&quot;storeStockId=&quot;+storeStockId);
        Integer ss = Integer.parseInt(storeStockId);
   	   String updateOpeningHours = &quot;update  afriex.app_store_operating_hours soh set soh.open_time = &apos;10:00&apos;, soh.close_time = &apos;20:00&apos; where soh.store_id = (select id from afriex.app_store where code = ?)&quot;;
   
        PreparedStatement preparedStmt = con.prepareStatement(updateOpeningHours);
        preparedStmt.setNString(1, storeCode);
        preparedStmt.executeUpdate();
    }
    
    con.close();

} catch(Throwable ex) {
    log.info(&quot;Beanshell failure: Teardownd&quot;, ex);
    throw ex;
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
        <collectionProp name="UserParameters.names">
          <stringProp name="-989163880">protocol</stringProp>
          <stringProp name="-332625698">baseUrl</stringProp>
          <stringProp name="-2125624994">apiVersion</stringProp>
          <stringProp name="96619420">email</stringProp>
          <stringProp name="1216985755">password</stringProp>
          <stringProp name="109770977">store</stringProp>
          <stringProp name="-1492131972">productCode</stringProp>
          <stringProp name="-1138215270">productQuantity</stringProp>
          <stringProp name="3373707">name</stringProp>
          <stringProp name="1874684019">platform</stringProp>
          <stringProp name="351608024">version</stringProp>
          <stringProp name="132835675">firstName</stringProp>
          <stringProp name="-1459599807">lastName</stringProp>
          <stringProp name="-987494927">provider</stringProp>
          <stringProp name="-1192969641">phoneNumber</stringProp>
        </collectionProp>
        <collectionProp name="UserParameters.thread_values">
          <collectionProp name="1223999842">
            <stringProp name="99617003">https</stringProp>
            <stringProp name="-634011008">afriex_system_under_test</stringProp>
            <stringProp name="-1411328367">api/v2</stringProp>
            <stringProp name="-442149004">${__RandomString(10,abcdefghijklmnopqrstuvwxyz,)}@gmail.com</stringProp>
            <stringProp name="942430850">${__Random(0000,9999,)}</stringProp>
            <stringProp name="-1002685122">london-store-stratford</stringProp>
            <stringProp name="-1640576866">Portobello</stringProp>
            <stringProp name="49">1</stringProp>
            <stringProp name="-262944941">com.afriex.customer.stage</stringProp>
            <stringProp name="104461">ios</stringProp>
            <stringProp name="46670517">1.0.0</stringProp>
            <stringProp name="1292908304">Firstname${__time(YMdd-HH:MM:SS,)}</stringProp>
            <stringProp name="1237060778">Lastname${__time(YMdd-HH:MM:SS,)}</stringProp>
            <stringProp name="-897050771">social</stringProp>
            <stringProp name="-304204267">+370${__RandomString(8,1234567890,)}</stringProp>
          </collectionProp>
        </collectionProp>
        <boolProp name="UserParameters.per_iteration">false</boolProp>
      </UserParameters>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
