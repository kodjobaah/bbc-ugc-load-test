{"ast":null,"code":"import _regeneratorRuntime from\"/Users/kodjo/workspace/afriex/loadtest-framework/docker/control/test-admin/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/kodjo/workspace/afriex/loadtest-framework/docker/control/test-admin/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import fetch from\"isomorphic-fetch\";import{get}from\"axios\";var fetchPostsApi=function fetchPostsApi(){var data=fetch(\"/tenants\").then(function(response){return response.json();});return data;};var fetchReportByTenant=function fetchReportByTenant(tenantId){var data=fetch(\"/tenantReport?tenant=\"+tenantId).then(function(response){return response.json();});return data;};var fetchLogs=function fetchLogs(tenantId){var data=fetch(\"/test-ouput?tenant=\"+tenantId).then(function(response){return response.json();});return data;};var fetchDashboardUrl=function fetchDashboardUrl(){var data=fetch(\"/dashboardUrl\").then(function(response){if(response.status===500){return{DashboardURL:\"\",InfluxdbURL:\"\",ChronografURL:\"\",ReportURL:\"\",MonitorURL:\"\"};}else{return response.json();}});return data;};var fetchSlavesForTenant=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(tenantId){var data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:data=get(\"/slaves?tenant=\"+tenantId).then(function(res){return res.data;});return _context.abrupt(\"return\",data);case 2:case\"end\":return _context.stop();}}},_callee);}));return function fetchSlavesForTenant(_x){return _ref.apply(this,arguments);};}();export{fetchPostsApi,fetchReportByTenant,fetchDashboardUrl,fetchSlavesForTenant};","map":{"version":3,"sources":["/Users/kodjo/workspace/afriex/loadtest-framework/docker/control/test-admin/src/provider/report.js"],"names":["fetch","get","fetchPostsApi","data","then","response","json","fetchReportByTenant","tenantId","fetchLogs","fetchDashboardUrl","status","DashboardURL","InfluxdbURL","ChronografURL","ReportURL","MonitorURL","fetchSlavesForTenant","res"],"mappings":"uTAAA,MAAOA,CAAAA,KAAP,KAAkB,kBAAlB,CACA,OAASC,GAAT,KAAoB,OAApB,CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,GAAIC,CAAAA,IAAI,CAAGH,KAAK,CAAC,UAAD,CAAL,CAAkBI,IAAlB,CAAuB,SAAUC,QAAV,CAAoB,CACpD,MAAOA,CAAAA,QAAQ,CAACC,IAAT,EAAP,CACD,CAFU,CAAX,CAIA,MAAOH,CAAAA,IAAP,CACD,CAND,CAQA,GAAMI,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,QAAD,CAAc,CACxC,GAAIL,CAAAA,IAAI,CAAGH,KAAK,CAAC,wBAA0BQ,QAA3B,CAAL,CAA0CJ,IAA1C,CAA+C,SACxDC,QADwD,CAExD,CACA,MAAOA,CAAAA,QAAQ,CAACC,IAAT,EAAP,CACD,CAJU,CAAX,CAMA,MAAOH,CAAAA,IAAP,CACD,CARD,CAUA,GAAMM,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACD,QAAD,CAAc,CAC9B,GAAIL,CAAAA,IAAI,CAAGH,KAAK,CAAC,sBAAwBQ,QAAzB,CAAL,CAAwCJ,IAAxC,CAA6C,SACtDC,QADsD,CAEtD,CACA,MAAOA,CAAAA,QAAQ,CAACC,IAAT,EAAP,CACD,CAJU,CAAX,CAMA,MAAOH,CAAAA,IAAP,CACD,CARD,CAUA,GAAMO,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC9B,GAAIP,CAAAA,IAAI,CAAGH,KAAK,CAAC,eAAD,CAAL,CAAuBI,IAAvB,CAA4B,SAAUC,QAAV,CAAoB,CACzD,GAAIA,QAAQ,CAACM,MAAT,GAAoB,GAAxB,CAA6B,CAC3B,MAAO,CACLC,YAAY,CAAE,EADT,CAELC,WAAW,CAAE,EAFR,CAGLC,aAAa,CAAE,EAHV,CAILC,SAAS,CAAE,EAJN,CAKLC,UAAU,CAAE,EALP,CAAP,CAOD,CARD,IAQO,CACL,MAAOX,CAAAA,QAAQ,CAACC,IAAT,EAAP,CACD,CACF,CAZU,CAAX,CAcA,MAAOH,CAAAA,IAAP,CACD,CAhBD,CAkBA,GAAMc,CAAAA,oBAAoB,0FAAG,iBAAOT,QAAP,2HACvBL,IADuB,CAChBF,GAAG,CAAC,kBAAoBO,QAArB,CAAH,CAAkCJ,IAAlC,CAAuC,SAACc,GAAD,CAAS,CACzD,MAAOA,CAAAA,GAAG,CAACf,IAAX,CACD,CAFU,CADgB,iCAIpBA,IAJoB,wDAAH,kBAApBc,CAAAA,oBAAoB,4CAA1B,CAOA,OACEf,aADF,CAEEK,mBAFF,CAGEG,iBAHF,CAIEO,oBAJF","sourcesContent":["import fetch from \"isomorphic-fetch\";\nimport { get } from \"axios\";\n\nconst fetchPostsApi = () => {\n  let data = fetch(\"/tenants\").then(function (response) {\n    return response.json();\n  });\n\n  return data;\n};\n\nconst fetchReportByTenant = (tenantId) => {\n  let data = fetch(\"/tenantReport?tenant=\" + tenantId).then(function (\n    response\n  ) {\n    return response.json();\n  });\n\n  return data;\n};\n\nconst fetchLogs = (tenantId) => {\n  let data = fetch(\"/test-ouput?tenant=\" + tenantId).then(function (\n    response\n  ) {\n    return response.json();\n  });\n\n  return data;\n};\n\nconst fetchDashboardUrl = () => {\n  let data = fetch(\"/dashboardUrl\").then(function (response) {\n    if (response.status === 500) {\n      return {\n        DashboardURL: \"\",\n        InfluxdbURL: \"\",\n        ChronografURL: \"\",\n        ReportURL: \"\",\n        MonitorURL: \"\",\n      };\n    } else {\n      return response.json();\n    }\n  });\n\n  return data;\n};\n\nconst fetchSlavesForTenant = async (tenantId) => {\n  let data = get(\"/slaves?tenant=\" + tenantId).then((res) => {\n    return res.data\n  })\n  return data;\n};\n\nexport {\n  fetchPostsApi,\n  fetchReportByTenant,\n  fetchDashboardUrl,\n  fetchSlavesForTenant,\n};\n"]},"metadata":{},"sourceType":"module"}